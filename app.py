
from flask import Flask, render_template, session, url_for, request, redirect
import pymysql
import json

app = Flask(__name__)
app.secret_key = 'sample_secret'

def connectsql():
    conn = pymysql.connect(host='localhost', user = 'root', passwd = 'konyang123!', db = 'userlist', charset='utf8')
    return conn

#@app.route('/')
# 세션유지를 통한 로그인 유무 확인
#def index():
#    if 'username' in session:
#        username = session['username']

#        return render_template('index.html', logininfo = username)
#    else:
#        username = None
#        return render_template('index.html', logininfo = username )

@app.route('/')
def post():
    if 'username' in session:
        username = session['username']
    else:
        username = None
    conn = connectsql()
    cursor = conn.cursor(pymysql.cursors.DictCursor)
    query = "SELECT * FROM result ORDER BY id DESC" # ORDER BY 컬럼명 DESC : 역순출력, ASC : 순차출력
    cursor.execute(query)
    result = cursor.fetchall()
    id = []
    for i, result_list in enumerate(result):
        result[i] = result_list.get('result')
        result[i] = result[i].lstrip('{')
        temp = result_list.get('id')
        temp = '{"id": "'+str(temp)+'", '
        result[i]=temp+result[i]
        result[i] = eval(str(result[i]))
    
    cursor.close()
    conn.close()
    return render_template('post.html', resultlist = result, id = id, logininfo=username)

@app.route('/result/<id>')
def content(id):
    if 'username' in session:
        username = session['username']
    else:
        username = None
    conn = connectsql()
    cursor = conn.cursor(pymysql.cursors.DictCursor)
    query = "SELECT * FROM result WHERE id = %s"
    value = id
    check_list = [
            "디폴트 계정 삭제",
            "root 권한 관리",
            "passwd 파일 권한 설정",
            "group 파일 권한 설정",
            "패스워드 사용규칙 적용",
            "Shell 제한",
            "su 제한"
            ]
    check_importance = [
            "중",
            "상",
            "상",
            "상",
            "중",
            "중",
            "중"
            ]
    check_criteria = [
            "/etc/passwd 파일에서 시스템에 사용되지 않는 Default 계정이 삭제되어 있는지",
            "/etc/passwd 파일에서 root 이외의 계정에 UID가 0으로 설정되어 있는지",
            "/etc/passwd 파일의 권한이 644 이하로 설정되어 있는지",
            "/etc/group 파일의 권한이 644 이하로 설정되어 있는지",
            "패스워드 최소길이: 8자 이상\n패스워드 최대 사용기간: 70일 이하\n패스워드 최소 사용기간: 7일 이상",
            "/etc/passwd 파일에서 접근이 필요하지 않은 계정에 쉘 제한이 되어 있는지",
            "/etc/pam.d/su 파일에서 su 권한을 whell 그룹만 사용할 수 있도록 설정되어 있는지"
            ]
    
    cursor.execute(query, value)
    result = cursor.fetchall()
    for i, result_list in enumerate(result):
        result[i] = result_list.get('result')
        result[i] = result[i].lstrip('{')
        temp = result_list.get('id')
        temp = '{"id": "'+str(temp)+'", '
        result[i]=temp+result[i]
        print(result[i])
        print("")
        result[i] = eval(str(result[i]))
    conn.commit()
    cursor.close()
    conn.close()

    return render_template('content.html', data = result, check_list=check_list, check_importance = check_importance, check_criteria = check_criteria, logininfo=username)

    
@app.route('/upload', methods=['POST'])
def upload():
    if request.method == 'POST':
        print("POST IN")
        test = request.get_json(cache=False, force=True)
        print("test: ",test)
        test = json.dumps(test)
        print("test: ",test)
        #result = json.loads(request.get_json(cache=False, force=True))
        #print("result: ",result)
        conn = connectsql()
        cursor = conn.cursor()
        cursor.execute("INSERT INTO result(result) values (%s)",test)
        conn.commit()
        cursor.close()
        conn.close()
        return "클라우드 데이터베이스에 결과 저장이 완료되었습니다."



#@app.route('/logout')
## 로그아웃 페이지. 주석만 풀면 바로 사용 가능.
#def logout():
#    session.pop('username', None)
#    return redirect(url_for('post'))

#@app.route('/login', methods=['GET','POST'])
#로그인 페이지. 주석만 풀면 바로 사용 가능.
#def login():
#    if request.method == 'POST':
#        userid = request.form['id']
#        userpw = request.form['pw']
#
#        logininfo = request.form['id']
#        conn = connectsql()
#        cursor = conn.cursor()
#        query = "SELECT * FROM tbl_user WHERE user_name = %s AND user_password = %s"
#        value = (userid, userpw)
#        cursor.execute(query, value)
#        data = cursor.fetchall()
#        cursor.close()
#        conn.close()
#        
#        for row in data:
#            data = row[0]
        
#        if data:
#            session['username'] = request.form['id']
#            session['password'] = request.form['pw']
#            return redirect(url_for('post'))
#        else:
#            return render_template('loginError.html')
#    else:
#        return render_template ('login.html')

#@app.route('/regist', methods=['GET', 'POST'])
#회원가입 페이지. 주석만 풀면 바로 사용 가능.
#def regist():
#    if request.method == 'POST':
#        userid = request.form['id']
#        userpw = request.form['pw']
#
#        conn = connectsql()
#        cursor = conn.cursor()
#        query = "SELECT * FROM tbl_user WHERE user_name = %s"
#        value = userid
#        cursor.execute(query, value)
#        data = (cursor.fetchall())
#        #import pdb; pdb.set_trace()
#        if data:
#            conn.rollback() # 이건 안 써도 될 듯
#            return render_template('registError.html') 
#        else:
#            query = "INSERT INTO tbl_user (user_name, user_password) values (%s, %s)"
#            value = (userid, userpw)
#            cursor.execute(query, value)
#            data = cursor.fetchall()
#            conn.commit()
#            return render_template('registSuccess.html')
#        cursor.close()
#        conn.close()
#    else:
#        return render_template('regist.html')   

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=80, debug=False)
